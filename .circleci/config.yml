version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.1.0
  dmz: eddiewebb/dmz@0.0.7
  docker: circleci/docker@1.2.1
  jq: circleci/jq@2.1.0

defaults: &defaults
  parallelism: 1
  working_directory: ~/zoomhub/zoomhub
  environment:
    CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
    CIRCLE_TEST_REPORTS: /tmp/circleci-test-results

migrate-database: &migrate-database
  docker:
    - image: fpco/stack-build
  steps:
    - attach_workspace:
        at: ~/zoomhub/zoomhub/workspace
    - run:
        name: Install ssh-keyscan for dmz/open_tunnel orb
        command: sudo apt-get update && sudo apt-get install --yes openssh-client
    - dmz/open_tunnel:
        bastion_host: "$BASTION_HOST"
        bastion_user: "admin"
        local_port: "9001"
        target_host: "$AWS_RDS_PGHOST"
        target_port: "5432"

    - run:
        name: "Import project environment variables"
        command: |
          echo 'export PGHOST="$AWS_RDS_PGHOST"' >> $BASH_ENV
          echo 'export PGPASSWORD="$AWS_RDS_PGPASSWORD"' >> $BASH_ENV

    - run:
        name: Migrate database
        command: cd ~/zoomhub/zoomhub/workspace && ./migrate-database.sh

deploy: &deploy
  docker:
    - image: fpco/stack-build
  steps:
    - attach_workspace:
        at: ~/zoomhub/zoomhub/workspace
    - run:
        name: "Import project environment variables"
        command: |
          echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"' >> $BASH_ENV
          echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"' >> $BASH_ENV
          echo 'export ZH_AWS_ACCOUNT_ID="$ZH_AWS_ACCOUNT_ID"' >> $BASH_ENV
          echo 'export ZH_AWS_EB_PROJECT="$ZH_AWS_EB_PROJECT"' >> $BASH_ENV
          echo 'export ZH_AWS_ECR_REPO="$ZH_AWS_ECR_REPO"' >> $BASH_ENV

    - aws-cli/setup
    - jq/install # required for Docker installation (facepalm)
    - docker/install-docker-tools
    - setup_remote_docker
    - run: |
        cd ~/zoomhub/zoomhub/workspace && \
          docker build \
            --rm=false \
            -t $ZH_AWS_ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com/$ZH_AWS_ECR_REPO:$CIRCLE_SHA1 \
            -f Dockerfile.deploy .
    - run: cd ~/zoomhub/zoomhub/workspace && ./deploy.sh $CIRCLE_SHA1

jobs:
  build:
    <<: *defaults
    docker:
      - image: fpco/stack-build
      - image: "circleci/postgres:9.6.5-alpine-ram"
        environment:
          POSTGRES_USER: zoomhub
          POSTGRES_DB: zoomhub_test

    steps:
      - checkout

      - run:
          name: "Setup custom environment variables"
          command: |
            echo 'export PGHOST="localhost"' >> $BASH_ENV
            echo 'export PGPORT="5432"' >> $BASH_ENV
            echo 'export PGUSER="zoomhub"' >> $BASH_ENV
            echo 'export PGDATABASE="zoomhub_test"' >> $BASH_ENV

      - run:
          name: Initialize workspace
          command: mkdir -p workspace
      - run:
          name: Initialize artifact storage
          command: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      - run:
          name: Install psql for preloading data
          command: sudo apt-get update && sudo apt-get install --yes postgresql-client

      # Dependencies
      #   This would typically go in either a build or a build-and-test job when
      #   using workflows
      # Restore the dependency cache
      - restore_cache:
          keys:
            - zh-stack-cache-v2-dep-{{ .Branch }}-{{ checksum "zoomhub.cabal" }}
            # This branch if available
            - zh-stack-cache-v2-dep-{{ .Branch }}-
            # Default branch if not
            - zh-stack-cache-v2-dep-master-
            # Any branch if there are none on the default branch -
            # this should be unnecessary if you have your default branch
            # configured correctly
            - zh-stack-cache-v2-dep-

      # Test
      - run:
          name: Run tests
          command: |
            HASHIDS_SALT='secret-salt'\
              stack build --no-terminal \
                          --fast \
                          --exec "migrate-database $PGDATABASE migrate"

            psql $PGDATABASE < ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql

            stack test --fast --no-terminal

      # - run:
      #     name: Copy coverage reports
      #     command: cp -r $(stack path --local-hpc-root) $CIRCLE_ARTIFACTS

      - run:
          name: Build binary
          command: stack build --install-ghc --pedantic --ghc-options="-O2"
      - run:
          name: Copy AWS ops files to workspace
          command: |
            cp \
              ops/aws/deploy.sh \
              ops/aws/Dockerfile.deploy \
              ops/aws/Dockerrun.aws.json.template \
              workspace
      - run:
          name: Copy public files to workspace
          command: cp -R public workspace
      - run:
          name: Copy database migration script
          command: cp ops/migrate-database.sh workspace
      - run:
          name: Copy zoomhub app binary to workspace
          command: cp "$(find .stack-work/dist -type f -name zoomhub | tr -d '\n')" workspace
      - run:
          name: Copy database migration binary to workspace
          command: cp "$(find .stack-work/dist -type f -name migrate-database)" workspace
      - persist_to_workspace:
          root: workspace
          paths:
            # deployment
            - deploy.sh
            - Dockerfile.deploy
            - Dockerrun.aws.json.template
            # migration
            - migrate-database
            - migrate-database.sh
            # app
            - public
            - zoomhub

      # Save dependency cache
      - save_cache:
          key: zh-stack-cache-v2-dep-{{ .Branch }}-{{ checksum "zoomhub.cabal" }}
          paths:
            - ~/.stack
            - .stack-work

      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results

      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results

  migrate-database-staging:
    <<: *defaults
    environment:
      BASTION_HOST: staging.zoomhub.net
      PGDATABASE: zoomhub_staging
    <<: *migrate-database

  deploy-staging:
    <<: *defaults
    environment:
      DEPLOY_HOST: staging.zoomhub.net
    <<: *deploy

  deploy-production:
    <<: *defaults
    environment:
      DEPLOY_HOST: zoomhub.net
    <<: *deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - migrate-database-staging:
          requires:
            - build
          filters:
            branches:
              # FIXME: Only migrate database on `postgresql` branch
              only: postgresql
              # ignore:
              #   - master
      - deploy-staging:
          requires:
            - build
            # - migrate-database-staging
          filters:
            branches:
              # FIXME: Only deploy `aws-elastic-beanstalk` branch to staging
              only: aws-elastic-beanstalk
              # ignore:
              #   - master
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              # FIXME: Re-enable deployment to production
              only: non-existent
