#!/bin/bash
set -eo pipefail

# Helpers
separator () {
    echo '------------------------------------------------------------------------------'
}

DEVELOPMENT_DB_NAME='zoomhub_development'
TEST_DB_NAME='zoomhub_test'

# Commands
case "$1" in
init)
    echo "Install Haskell 'stack'"
    brew install haskell-stack
    stack setup

    echo "Install 'jq'"
    brew install jq

    echo "Install 'postgres'"
    brew install postgresql@10
    brew services start postgresql@10

    echo "Install 'vips'"
    brew install vips
    ;;
lint)
    stack exec hlint -- src tests
    ;;
format)
    files=$(git ls-files | grep --invert 'vendor/' | grep '.hs$')
    stylish-haskell --inplace $files
    ;;
run)
    dropdb --if-exists "$DEVELOPMENT_DB_NAME"
    createdb "$DEVELOPMENT_DB_NAME"

    PGUSER="$(whoami)" HASHIDS_SALT='secret-salt' \
      stack build --fast --exec "migrate-database $DEVELOPMENT_DB_NAME migrate"

    # NOTE: Preserves existing content IDs:
    DISABLE_PG_TRIGGERS='SET session_replication_role = replica;'
    psql --single-transaction --output /dev/null --quiet "$DEVELOPMENT_DB_NAME" \
      <<< $(echo "$DISABLE_PG_TRIGGERS" && cat ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql)

    stack build --ghc-options='' \
                --file-watch \
                --fast \
                --exec ./scripts/run-development.sh
    ;;
test)
    dropdb --if-exists "$TEST_DB_NAME"
    createdb "$TEST_DB_NAME"

    PGUSER="$(whoami)" HASHIDS_SALT='secret-salt' \
      stack build --ghc-options='-Wall' \
                  --fast \
                  --exec "migrate-database $TEST_DB_NAME migrate"

    psql --output /dev/null --quiet "$TEST_DB_NAME" \
      < ./data/zoomhub_test-pg-dump-2019-10-16-2-data.sql

    # See: https://github.com/commercialhaskell/stack/issues/2210
    MODULES="$2"
    PGUSER="$(whoami)" PGDATABASE="$TEST_DB_NAME" \
      stack test --ghc-options='-Wall' \
                 --fast \
                 --test-arguments '--match "'"$MODULES"'"'
    ;;
db)
    case "$2" in
    dump)
      pg_dump "$DEVELOPMENT_DB_NAME"
      ;;
    *)
        echo "Unknown command: $0 $@. Try $0 $1 dump"
        exit 1
    esac
    ;;

*)
    echo "Unknown command: $0 $@. Try: $0 format|init|lint|run|test"
    ;;
esac
